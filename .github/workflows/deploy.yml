# This is a basic workflow to help you get started with Actions

name: Deploy to Lambda Function

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ main , release]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      LAMBDA_PACKAGED_FILE: jasperreports-1.0.1.jar

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: checkout workspace
        uses: actions/checkout@v3

      - name: Set variables for development
        if: endsWith(github.ref, '/main')
        run: |
          echo "AWS_LAMBDA_FUNCTION_NAME=Dev_ReportGenerator" >> $GITHUB_ENV
          echo "REPORTS_BUCKET=dev-billing-report-generator-files-bucket" >> $GITHUB_ENV
          echo "TEMPLATES_S3_BUCKET=dev-billing-report-generator-templates-bucket" >> $GITHUB_ENV
          echo "FILES_BUCKET=dev-billing-data-extractor" >> $GITHUB_ENV
          echo "DYNAMODB_TABLE=Dev_BillingStagingRecords" >> $GITHUB_ENV          

      - name: Set variables for production
        if: endsWith(github.ref, '/release')
        run: |
          echo "AWS_LAMBDA_FUNCTION_NAME=Prod_ReportGenerator" >> $GITHUB_ENV
          echo "REPORTS_BUCKET=prod-billing-report-generator-files-bucket" >> $GITHUB_ENV          
          echo "TEMPLATES_S3_BUCKET=prod-billing-report-generator-templates-bucket" >> $GITHUB_ENV
          echo "FILES_BUCKET=prod-billing-data-extractor" >> $GITHUB_ENV
          echo "DYNAMODB_TABLE=Prod_BillingStagingRecords" >> $GITHUB_ENV

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: build project
        run: mvn -B package --file lambda_code/pom.xml 

      - name: Configure Secrets
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-skip-session-tagging: true
          aws-access-key-id: ${{ secrets.AWS_SECRET_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-external-id:  ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
          role-duration-seconds: 1200
          role-session-name: lambda_deployment

      - name: Deploy Code to AWS
        run: |
          aws s3 cp lambda_code/target/$LAMBDA_PACKAGED_FILE s3://$TEMPLATES_S3_BUCKET/lambda/
          aws lambda update-function-configuration --function-name $AWS_LAMBDA_FUNCTION_NAME --environment "Variables={DYNAMODB_TABLE=$DYNAMODB_TABLE, FILES_BUCKET=$FILES_BUCKET, LAMBDA_BUCKET=$TEMPLATES_S3_BUCKET}"
          aws lambda update-function-code --function-name $AWS_LAMBDA_FUNCTION_NAME --s3-bucket $TEMPLATES_S3_BUCKET --s3-key lambda/$LAMBDA_PACKAGED_FILE

